dNL.dt = U - NL/(lambda)
dNS.dt = (N_tot - NL - NS)/tau - U
return(list(c(dNL.dt, dNS.dt)));
})
}
grow_moss_v2 <- function(t,y,p) {
NL = y[1] # nitrogen in leaves
NS = y[2] # nitrogen in soil
with(as.list(p),{
U = min(u*a_r*NS*NL, # n limited uptake
g*n*((V/k)*(1-exp(-k*NL/(n*sigma))) - r*n*NL/(n*sigma))) # c-limited uptake
# U = min(u*a_r*NS*NL, # n limited uptake
#        g*n*(V/k*NL/(n*sigma) - r*n*NL/(n*sigma))) # c-limited uptake
#
# simple_photo = V/k*NL/(n*sigma)
# #photo = g*n*((V/k)*(1-exp(-k*NL/(n*sigma))))
#U = u*a_r*NS*NL
#print(simple_photo)
dNL.dt = U - NL/(lambda)
dNS.dt = (N_tot - NL - NS)/tau - U
return(list(c(dNL.dt, dNS.dt)));
})
}
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau)
return(leaf_traits)
}
##Parameters -----
#param_file <- "parameters/moss_v2.p"
param_file <- "parameters/weng_units.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
p_derived <- c(p_list, link_traits(0.002, p_list)) # parameters and derived parameters
# N Equilibria
list2env(p_derived, envir = environment())
NS.eq = 1/(lambda*u*a_r)
NL.eq = (N_tot*lambda - 1/(u*a_r))/(tau + lambda)
L <- seq(0,2, 0.001)
NL <- L/(n*sigma)
calculate_leaf_flux <- function(NL) {
NS = N_tot
photo <- (V/k)*(1-exp(-k*NL/(n*sigma)))
resp <- r*n*NL/(n*sigma)
leaf_flux <- tibble(NL, photo, resp)
return(leaf_flux)
}
leaf_flux <- calculate_leaf_flux(NL) %>%
mutate(net_gain = photo-resp,
L = NL*n*sigma)
leaf_flux %>%
pivot_longer(cols = photo:net_gain, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=L, y = value, color = variable)) +
geom_line() +
geom_hline(yintercept = V/k, aes(color = "black")) +
labs(x = "Leaf Area per m2 ground (m2)", y = "Carbon Flux (kgC m-2 yr-1)")
# Initial Conditions
NL.0 <- N_tot #N_tot-N_tot*0.5
NS.0 <- p_derived$N_tot - NL.0
y.0 = c(NL.0, NS.0)
y.star = c(NL.eq, NS.eq)
# Integrate
t = seq(from=0,to=50,by=0.01)
out = ode(y=y.0,times=t,func=grow_moss_v2,parms=p_derived) %>% as_tibble()
colnames(out) <- c("time", "NL", "NS")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red")
# Initial Conditions
NL.0 <- N_tot-N_tot*0.5
NS.0 <- p_derived$N_tot - NL.0
y.0 = c(NL.0, NS.0)
y.star = c(NL.eq, NS.eq)
# Integrate
t = seq(from=0,to=50,by=0.01)
out = ode(y=y.0,times=t,func=grow_moss_v2,parms=p_derived) %>% as_tibble()
colnames(out) <- c("time", "NL", "NS")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state", x = "Years")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k - r*sigma, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
# Viz
out %>%
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
pivot_longer(NL:N_lit, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
tail(NL)
tail(out)
out %>% mutate(L = NL*n*sigma)
# Viz
out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## plotting
pivot_longer(NL:net_gain, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("N_lit", "NL", "NS")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
# Viz
out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL) %>%
## plotting
pivot_longer(NL:net_gain, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("N_lit", "NL", "NS")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## simple equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL)
## plot uptake rates
out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL)
## plot uptake rates
potential_growth <- out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL)
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## simple equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## simple equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN flux", x = "year")
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## simple equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN flux", x = "year")
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
labs(y = "gN flux", x = "year")
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
lims(y = c(0,100)) +
labs(y = "gN flux", x = "year")
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
#lims(y = c(0,100)) +
labs(y = "gN flux", x = "year")
source("~/Projects/shrub_model/code/moss_model_v2.R", echo=TRUE)
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
lims(y = c(0,250)) +
labs(y = "gN flux", x = "year")
source("~/Projects/shrub_model/code/moss_model_v2.R", echo=TRUE)
source("~/Projects/shrub_model/code/moss_model_v2.R", echo=TRUE)
grow_moss_v2 <- function(t,y,p) {
NL = y[1] # nitrogen in leaves
NS = y[2] # nitrogen in soil
with(as.list(p),{
U = min(u*a_r*NS*NL, # n limited uptake
g*n*((V/k)*(1-exp(-k*NL/(n*sigma))) - r*n*NL/(n*sigma))) # c-limited uptake
# U = min(u*a_r*NS*NL, # n limited uptake
#        g*n*(V/k*NL/(n*sigma) - r*n*NL/(n*sigma))) # c-limited uptake
#
# simple_photo = V/k*NL/(n*sigma)
# #photo = g*n*((V/k)*(1-exp(-k*NL/(n*sigma))))
#U = u*a_r*NS*NL
#print(simple_photo)
dNL.dt = U - NL/(lambda)
dNS.dt = (N_tot - NL - NS)/tau - U
return(list(c(dNL.dt, dNS.dt)));
})
}
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau)
return(leaf_traits)
}
##Parameters -----
#param_file <- "parameters/moss_v2.p"
param_file <- "parameters/weng_units.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
p_derived <- c(p_list, link_traits(0.002, p_list)) # parameters and derived parameters
# N Equilibria
list2env(p_derived, envir = environment())
NS.eq = 1/(lambda*u*a_r)
NL.eq = (N_tot*lambda - 1/(u*a_r))/(tau + lambda)
L <- seq(0,2, 0.001)
NL <- L/(n*sigma)
calculate_leaf_flux <- function(NL) {
NS = N_tot
photo <- (V/k)*(1-exp(-k*NL/(n*sigma)))
resp <- r*n*NL/(n*sigma)
leaf_flux <- tibble(NL, photo, resp)
return(leaf_flux)
}
leaf_flux <- calculate_leaf_flux(NL) %>%
mutate(net_gain = photo-resp,
L = NL*n*sigma)
leaf_flux %>%
pivot_longer(cols = photo:net_gain, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=L, y = value, color = variable)) +
geom_line() +
geom_hline(yintercept = V/k, aes(color = "black")) +
labs(x = "Leaf Area per m2 ground (m2)", y = "Carbon Flux (kgC m-2 yr-1)")
source("~/Projects/shrub_model/code/moss_model_v2.R", echo=TRUE)
# Read parameter file
param_file <- "parameters/default_species.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
mineralize_N <- function(sigma, total_N, parameter_list) {
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
tau_s = decompose_soil(temp, moisture)*s*sigma
N_min = total_N/(lambda + tau_s)
return(N_min)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau_s = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau_s)
return(leaf_traits)
}
cycle_carbon <- function(sigma, N_min, parameter_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
}
## testing
traits <- link_traits(0.05, p_list)
cycle_carbon(0.02, 0.05, p_list)
# generate plants and environment
lma <- seq(0.01,0.25, length = 100)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],list(p_list)), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# FIGURE 1a: viz Leaf Area
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(0,10))
# FIGURE 1b: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-1,5))
# Initial Conditions
NL.0 <- N_tot-N_tot*0.5
NS.0 <- p_derived$N_tot - NL.0
y.0 = c(NL.0, NS.0)
y.star = c(NL.eq, NS.eq)
# Integrate
t = seq(from=0,to=50,by=0.01)
out = ode(y=y.0,times=t,func=grow_moss_v2,parms=p_derived) %>% as_tibble()
colnames(out) <- c("time", "NL", "NS")
# Viz
out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL) %>%
## plotting
pivot_longer(NL:net_gain, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("N_lit", "NL", "NS")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
## simple equilibria
geom_hline(yintercept = V/k, color = "gray") +
geom_hline(yintercept = NL.eq, color = "red") +
labs(y = "gN in each state (gN)", x = "years")
## plot uptake rates
potential_growth <- out %>%
## calculate litter
mutate(N_lit = p_derived$N_tot - NL - NS) %>%
## calculate flux rates
mutate(photo = g*n*(V/k)*(1-exp(-k*NL/(n*sigma))),
resp = g*n*(r*n*NL/(n*sigma)),
net_gain = photo-resp) %>%
## calculate N-limitation
mutate(n_uptake = u*a_r*NS*NL)
potential_growth %>%
## plotting
pivot_longer(NL:n_uptake, names_to = "variable", values_to = "value") %>%
filter(variable %in% c("photo", "resp", "net_gain", "n_uptake")) %>%
## VIZ
ggplot(aes(x=time, y=value, color=variable)) +
geom_line()  +
lims(y = c(0,250)) +
labs(y = "gN flux", x = "year")
leaf_flux %>%
pivot_longer(cols = photo:net_gain, names_to = "variable", values_to = "value") %>%
ggplot(aes(x=L, y = value, color = variable)) +
geom_line() +
geom_hline(yintercept = V/k, aes(color = "black")) +
labs(x = "Leaf Area per m2 ground (m2)", y = "Carbon Flux (kgC m-2 yr-1)")
