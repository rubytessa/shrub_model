ggplot(carbon_balance) +
geom_line(aes(x = N_min, y = L, color = sigma)) +
facet_wrap(vars(carbon))
carbon_balance
carbon_balance(print=n=200)
carbon_balance %>% print(n=200)
carbon_balance %>% filter(carbon == "net")
# viz LAI vs N_min
ggplot(carbon_balance) +
geom_line(aes(x = N_min, y = L, color = factor(sigma))) +
facet_wrap(vars(carbon))
# viz LAI vs N_min
ggplot(carbon_balance) +
geom_line(aes(x = N_min, y = flux, color = factor(sigma))) +
facet_wrap(vars(carbon))
# Packages
library(tidyverse)
# Read parameter file
param_file <- "parameters/default_species.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
mineralize_N <- function(sigma, total_N, parameter_list) {
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
tau_s = decompose_soil(temp, moisture)*s*sigma
N_min = total_N/(lambda + tau_s)
return(N_min)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau_s = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau_s)
return(leaf_traits)
}
cycle_carbon <- function(sigma, N_min, parameter_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
}
# generate plants and environment
lma <- seq(0,1.2, length = 20)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2]), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
# viz LAI
ggplot(carbon_balance) +
geom_line(aes(x = L, y = flux, color = carbon))  +
facet_wrap(vars(N_min))
# generate plants and environment
lma <- seq(0,1.2, length = 20)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2]), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
list2env(p_list, envir = .GlobalEnv)
calculate_n_ref_optimal <- function(y) {
# y = optimal lma
(A + B*y)/(k*c*y)*log(V/((A+B*y)^2*r/A + G/c))
}
calculate_n_ref_ess <- function(y){ ## S36, #EQ13
# y = ess lma
(A + B*y)/(k*c*sigma_min)*log(V/((A+B*y)^2*r/A + G/c))
}
# ESS Thresholds
sigma_max <- (sqrt((V-G/c)/(r*A)) - 1)*A/B
sigma_ess_min <- (sqrt(V*A/((exp(1)^2*r)))- A)/B
n_1 <- (A + B*sigma_min)/(k*c*sigma_min)*log(V/((A+B*sigma_min)^2*r/A+ G/c))
n_2 <- A/(exp(1)*k*c*sigma_min)*sqrt(V/(r*A))*log(V/(V/exp(1)^2 + G/c))
## VIZ Plot
y <- seq(-sigma_max,sigma_max,length = 20000) # sequence of LMA values
fig_3_transpose <- tibble(lma = y,
n_ref_ess = calculate_n_ref_ess(y),
n_ref_opt = calculate_n_ref_optimal(y)) %>%
pivot_longer(cols = starts_with("n"), names_to = "strategy", values_to = "n_min")
fig_3_transpose$strategy = factor(fig_3_transpose$strategy,levels = c("n_ref_opt", "n_ref_ess")
)
## ESS LMA
ggplot(fig_3_transpose) +
# Thresholds
geom_hline(yintercept = n_1, color = "blue2", linetype =2) +
geom_hline(yintercept = n_2, color = "red", linetype = 2) +
geom_vline(xintercept = 0.02, color = "green4") +
geom_vline(xintercept = sigma_max, color = "green4") +
geom_vline(xintercept = sigma_ess_min, color = "green4", linetype = 2) +
# LMA
geom_line(aes(x=lma, y= n_min)) +
#geom_segment(aes(x = sigma_min, xend = sigma_min, y = n_1, yend = 40)) +
# Axes
ylim(0,40) +
xlim(0, sigma_max) +
coord_flip() +
facet_grid(rows = vars(strategy),
labeller = labeller(strategy = c(n_ref_ess = "ESS", n_ref_opt = "optimal"))) +
# Formatting
theme_bw() +
ggtitle("Figure 3") +
labs(y = "Reference N mineralization rate", x = "LMA")
## testing
traits <- link_traits(0.05, p_list)
traits
cycle_carbon(0.02, p_list, 0.05)
# Read parameter file
param_file <- "parameters/default_species.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
cycle_carbon(0.02, p_list, 0.05)
# Read parameter file
param_file <- "parameters/default_species.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
mineralize_N <- function(sigma, total_N, parameter_list) {
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
tau_s = decompose_soil(temp, moisture)*s*sigma
N_min = total_N/(lambda + tau_s)
return(N_min)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau_s = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau_s)
return(leaf_traits)
}
cycle_carbon <- function(sigma, N_min, parameter_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
}
## testing
traits <- link_traits(0.05, p_list)
cycle_carbon(0.02, p_list, 0.05)
cycle_carbon
p_list
leaf_traits <- link_traits(sigma, parameter_list)
leaf_traits <- link_traits(sigma, p_list)
leaf_traits <- link_traits(sigma, p_list)
leaf_traits <- link_traits(sigma, p_list)
sigma = 0.05
leaf_traits <- link_traits(sigma, p_list)
list2env(p_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
cycle_carbon <- function(sigma, N_min, p_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, p_list)
list2env(p_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
}
## testing
traits <- link_traits(0.05, p_list)
cycle_carbon(0.02, p_list, 0.05)
str(p_list)
link_traits(0.02, p_list)
## testing
traits <- link_traits(0.05, p_list)
traits
cycle_carbon(0.02, p_list, 0.05)
cycle_carbon(0.02, 0.05, p_list)
# generate plants and environment
lma <- seq(0,1.2, length = 20)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2]), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
?pmap_dfr
list(grid[,1], grid[,2], p_list)
list(grid[,1], grid[,2], list(p_list)
)
list(grid[,1], grid[,2], rep(p_list, length(grid[,1])))
rep(p_list, x = 20)
rep(p_list, n=20
)
list(p_list)
list(rep(p_list, n = 3))
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2], list(p_list)), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],p_list), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],p_list)), cycle_carbon) %>%
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],p_list), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],list(p_list))), cycle_carbon) %>%
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],list(p_list)), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
carbon_balance
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-10,10))
# generate plants and environment
lma <- seq(0,1.2, length = 100)
# generate plants and environment
lma <- seq(0.01,1.2, length = 100)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],list(p_list)), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-10,10))
# generate plants and environment
lma <- seq(0.01,0.25, length = 100)
N_min <- round(seq(0.05, 40, length = 20), digits = 2)
grid <- expand.grid(lma = lma, N_min = N_min) %>% tibble()
# grow plants
carbon_balance <- pmap_dfr(list(grid[,1], grid[,2],list(p_list)), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux") %>%
## for plotting aesthetics
mutate(N_min_short = round(N_min, digits = 2 ))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-10,10))
# viz LAI
ggplot(carbon_balance) +
geom_line(aes(x = L, y = flux, color = carbon))  +
facet_wrap(vars(N_min))
# viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-10,10))
# FIGURE 1: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-5,5))
# FIGURE 1: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-1,5))
carbon_balance
# FIGURE 1: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-1,5))
# FIGURE 1: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min))
# FIGURE 1: viz Leaf Area
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min))
# viz LAI
ggplot(carbon_balance) +
geom_line(aes(x = L, y = flux, color = carbon))  +
facet_wrap(vars(N_min))
# FIGURE 1a: viz Leaf Area
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min))
# FIGURE 1a: viz Leaf Area
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(0,10))
# FIGURE 1b: viz carbon balance
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min)) +
ylim(c(-1,5))
list2env(p_list, envir = .GlobalEnv)
calculate_n_ref_optimal <- function(y) {
# y = optimal lma
(A + B*y)/(k*c*y)*log(V/((A+B*y)^2*r/A + G/c))
}
calculate_n_ref_ess <- function(y){ ## S36, #EQ13
# y = ess lma
(A + B*y)/(k*c*sigma_min)*log(V/((A+B*y)^2*r/A + G/c))
}
# ESS Thresholds
sigma_max <- (sqrt((V-G/c)/(r*A)) - 1)*A/B
sigma_ess_min <- (sqrt(V*A/((exp(1)^2*r)))- A)/B
n_1 <- (A + B*sigma_min)/(k*c*sigma_min)*log(V/((A+B*sigma_min)^2*r/A+ G/c))
n_2 <- A/(exp(1)*k*c*sigma_min)*sqrt(V/(r*A))*log(V/(V/exp(1)^2 + G/c))
## VIZ Plot
y <- seq(-sigma_max,sigma_max,length = 20000) # sequence of LMA values
fig_3_transpose <- tibble(lma = y,
n_ref_ess = calculate_n_ref_ess(y),
n_ref_opt = calculate_n_ref_optimal(y)) %>%
pivot_longer(cols = starts_with("n"), names_to = "strategy", values_to = "n_min")
fig_3_transpose$strategy = factor(fig_3_transpose$strategy,levels = c("n_ref_opt", "n_ref_ess")
)
## ESS LMA
ggplot(fig_3_transpose) +
# Thresholds
geom_hline(yintercept = n_1, color = "blue2", linetype =2) +
geom_hline(yintercept = n_2, color = "red", linetype = 2) +
geom_vline(xintercept = 0.02, color = "green4") +
geom_vline(xintercept = sigma_max, color = "green4") +
geom_vline(xintercept = sigma_ess_min, color = "green4", linetype = 2) +
# LMA
geom_line(aes(x=lma, y= n_min)) +
#geom_segment(aes(x = sigma_min, xend = sigma_min, y = n_1, yend = 40)) +
# Axes
ylim(0,40) +
xlim(0, sigma_max) +
coord_flip() +
facet_grid(rows = vars(strategy),
labeller = labeller(strategy = c(n_ref_ess = "ESS", n_ref_opt = "optimal"))) +
# Formatting
theme_bw() +
ggtitle("Figure 3") +
labs(y = "Reference N mineralization rate", x = "LMA")
shiny::runApp('ess_lma')
library(tidyverse)
library(lubridate)
# Description: R Script to read in % cover sheets and % cover totals from Arctic LTER MAT06 plots 2021
# Author: Ruby An
# Date: 2022-02-14
## required packages
library(tidyverse)
## functions
read_cover_sheet <- function(file) {
## read 2021 arctic lter % cover data sheets
site <- readxl::read_xlsx(file, col_names = F, range = "A1:A1")[[1]] %>%
str_extract('\\b\\w+$') # extracts after non-word character, using \\b
block <- readxl::read_xlsx(file, col_names = F, range = "D1")[[1]] %>%
str_extract('\\b\\w+$') %>% as.integer()
treatment <- readxl::read_xlsx(file, col_names = F, range = "G1")[[1]] %>%
str_extract('\\b\\w+$')
values <- readxl::read_xlsx(file, range = "A4:I30")
# make dataframe
data <- values %>% pivot_longer(
cols = '1':'8',
names_to = "plot",
values_to = "cover"
) %>%
rename(Species.Code = ...1) %>%
mutate(Year = 2021, Site = site, Block = block, Treatment = treatment)
return(data)
}
## load data for 2021
files <- list.files(path = "data/arc-lter_mat06_2021/",full.names = T)
file <- files[1]
data <- map_dfr(files, read_cover_sheet)
totals <- data %>% group_by(Block, Treatment, plot) %>% summarize(total = sum(cover, na.rm = T))
#### Tracking Species with geom_smooth
my_species <- c("Bet nan", "Sal pul", "Led pal", "Vac vit")
sp_data <- tidy_data %>%
filter(Species %in% my_species)
tidy_data <- read_csv("data/mat06_cover_all.csv") %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "F2", "F5", "F10")))
## ESS LMA
ggplot(fig_3_transpose) +
# Thresholds
geom_hline(yintercept = n_1, color = "blue2", linetype =2) +
geom_hline(yintercept = n_2, color = "red", linetype = 2) +
geom_vline(xintercept = 0.02, color = "green4") +
geom_vline(xintercept = sigma_max, color = "green4") +
geom_vline(xintercept = sigma_ess_min, color = "green4", linetype = 2) +
# LMA
geom_line(aes(x=lma, y= n_min)) +
#geom_segment(aes(x = sigma_min, xend = sigma_min, y = n_1, yend = 40)) +
# Axes
ylim(0,40) +
xlim(0, sigma_max) +
coord_flip() +
facet_grid(rows = vars(strategy),
labeller = labeller(strategy = c(n_ref_ess = "ESS", n_ref_opt = "optimal"))) +
# Formatting
theme_bw() +
ggtitle("Figure 3") +
labs(y = "Reference N mineralization rate", x = "LMA")
### Fig 3a and 3b alone -----------
y = seq(sigma_min,2,length = 2000)
fig_3_transpose <- tibble(lma = y,
n_ref_ess = calculate_n_ref_ess(y),
n_ref_opt = calculate_n_ref_optimal(y))
## Read Tundra Trait Team data
ttt.traits <- read_csv("data/TTT_cleaned_dataset_v1.csv")
getwd()
