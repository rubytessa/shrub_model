f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
# set simulation duration
Time <- 100
dt <- 0.1
t.seq <- seq(0, Time, by = dt)
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
plot_temporal_dynamics
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_isocline_dynamics
plot_temporal_dynamics / plot_isocline_dynamics
## adjust parameters
p.tseries <- list(r=1, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.2 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.2 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
## Plot phaseplane
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_isocline_dynamics
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.2 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
## Plot phaseplane
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.8 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
## Plot phaseplane
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.1 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.5 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
## Plot phaseplane
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_temporal_dynamics / plot_isocline_dynamics
# state variable values (initial values at beginning of "experiments")
i.state <- c(B=2.5, R=3)
# parameter values
r <- 0.5 # supply rate of resource
g <- 0.5 # growth rate
h <- 0.5 # handling time
f <- 1 # conversion efficiency of consumer
L <- 0.7 # loss rate of consumer
p <- list(r=r, g=g, f=f, h=h, L=L) # full parameter list
## adjust parameters
p.tseries <- list(r=r, g=g, f=f, L=L, h=h)
t.seq <- seq(0, 100, by = 0.1)
tseries <- ode(i.state,t.seq, one_sp_one_resource, p.tseries)
# adjust resource and consumer isoclines / # analytical equilibrium resource levels
state.eq <- with(as.list(p.tseries), {
R.star <- L/(f*g-h*g*L)
B.star <- r/(g*R.star)
return(list(R.star = R.star, B.star = B.star))
})
R.star <- state.eq$R.star
B.star <- state.eq$B.star
## plot dynamics around consumer and resource isoclines.
## time series
plot_temporal_dynamics <- ggplot(as.data.frame(tseries), aes(x = time)) +
geom_line(aes(y = R, color = "Resource")) +
geom_line(aes(y = B, color = "Consumer Biomass")) +
# analytical lines
geom_hline(aes(yintercept = R.star, color = "Resource"), linetype = 2) +
geom_hline(aes(yintercept = B.star, color = "Consumer Biomass"), linetype = 2) +
ylab("Abundance") +
xlab("Time") +
scale_color_manual(values = color_palette, name = "") +
scale_color_viridis_d(name = "", direction = -1)
## Plot phaseplane
# make arrow data
plot_arrows <- as.data.frame(cbind(tseries[-Time, ], tseries[-1, ]))
colnames(plot_arrows)[4:6] <- c("time.n1","B.n1","R.n1")
# calculate isocline curves
## create resource isocline
R.iso <- expression(L/(f*g-h*g*L)) # set R = 0 and solved algebraically
R.star <- eval(R.iso)
B.iso <- expression(r/(g*L/(f*g-h*g*L)))
B.star <- eval(B.iso)
plot_isocline_dynamics <- ggplot() +
geom_segment(data = plot_arrows, aes(x = R, xend = R.n1, y = B, yend = B.n1), arrow = arrow(length = unit(0.1,"cm"))) +
geom_point(aes(x = i.state[2], y = i.state[1]), shape = 21, fill = "white") +
xlab("Resource") +
ylab("Consumer Biomass") +
geom_hline(aes(yintercept = B.star, color = "B isocline")) +
geom_vline(aes(xintercept = R.star, color = "R isocline")) +
scale_color_manual(values = color_palette, name = "")
plot_temporal_dynamics / plot_isocline_dynamics
# Set-up storage matrices
outlist <- list()
n = 100 # number of steps to break down the variables
out_end <- tibble(B_end = rep(NA, n), R_end = rep(NA,n)) # data frame of outputs
## Assign parameters in grid - choose two variables to scan over (r, L)
r = seq(0,5, length.out = n) #resource supply rate
L = seq(0,5, length.out = n) #loss rate
plist <- expand.grid(r=r,L=L) %>% bind_cols(g = rep(1, n = n^2), f = rep(1, n = n^2), h = rep(1, n = n^2))
## Analytical solutions
states.summary <- plist %>%
mutate(R.star = L/(f*g-h*g*L),
B.star = r/(g*R.star))
# Viz Heatmap of bimoass for r vs L
ggplot(states.summary, aes(x=L, y=r)) +
geom_raster(aes(fill = B.star)) +
scale_fill_continuous(limits = c(0,20),) +
theme_minimal()
## Numerical solutions
#
# #initial conditions
# t = seq(from=0,to=100,by=0.5)
# B_0 = 5
# R_0 = 10
# y0 = c(B_0, R_0)
#
# # Integrate & store output
# for (i in 1:nrow(plist)) {
#   outlist[[i]] <- ode(y = y0, parms = plist[i,], func = one_sp_one_resource, times = t)
#   out_end[i, 1] <- outlist[[i]][,2] %>% tail(n=1)
#   out_end[i, 2] <- outlist[[i]][,3] %>% tail(n=1)
# }
#
# out_full <- bind_cols(plist, out_end) %>%
#   # add analytical solutions
#   mutate(R_star = L/(g*f)) %>%
#   mutate(B_star = r/(g*R_star))
# Set-up storage matrices
outlist <- list()
n = 100 # number of steps to break down the variables
out_end <- tibble(B_end = rep(NA, n), R_end = rep(NA,n)) # data frame of outputs
## Assign parameters in grid - choose two variables to scan over (r, L)
r = seq(0,5, length.out = n) #resource supply rate
L = seq(0,1, length.out = n) #loss rate
plist <- expand.grid(r=r,L=L) %>% bind_cols(g = rep(1, n = n^2), f = rep(1, n = n^2), h = rep(1, n = n^2))
## Analytical solutions
states.summary <- plist %>%
mutate(R.star = L/(f*g-h*g*L),
B.star = r/(g*R.star))
# Viz Heatmap of bimoass for r vs L
ggplot(states.summary, aes(x=L, y=r)) +
geom_raster(aes(fill = B.star)) +
scale_fill_continuous(limits = c(0,20),) +
theme_minimal()
## Numerical solutions
#
# #initial conditions
# t = seq(from=0,to=100,by=0.5)
# B_0 = 5
# R_0 = 10
# y0 = c(B_0, R_0)
#
# # Integrate & store output
# for (i in 1:nrow(plist)) {
#   outlist[[i]] <- ode(y = y0, parms = plist[i,], func = one_sp_one_resource, times = t)
#   out_end[i, 1] <- outlist[[i]][,2] %>% tail(n=1)
#   out_end[i, 2] <- outlist[[i]][,3] %>% tail(n=1)
# }
#
# out_full <- bind_cols(plist, out_end) %>%
#   # add analytical solutions
#   mutate(R_star = L/(g*f)) %>%
#   mutate(B_star = r/(g*R_star))
# Line plot of B_end vs L
states.summary %>% group_by(r) %>%
ggplot(states.summary, aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r))) +
lims(y=c(0,20))
# Line plot of B_end vs L
states.summary %>%
ggplot(states.summary, aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r))) +
lims(y=c(0,20))
states.summary$r
r
r_s <- c(0.5,1,2,4)
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(0.5,1,2,4))  %>% # choose specific r values
ggplot(states.summary, aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r))) +
lims(y=c(0,20))
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(0.5,1,2,4))  %>% # choose specific r values
ggplot(states.summary, aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
states.summary %>% filter(r %in% c(0.5,1,2,4))
states.summary
states.summary$r
min(r)
max(r)
median(r)
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), median(r), max(r)))  %>% # choose specific r values
ggplot(states.summary, aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
states.summary %>% filter(r %in% c(min(r), median(r), max(r)))
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), median(r), max(r)))  %>% # choose specific r values
ggplot(., aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r)), max(r)))  %>% # choose specific r values
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r)), max(r)))) %>% # choose specific r values
ggplot(., aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r)), max(r))))
which(abs(r - median(r))
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r))), max(r))) %>% # choose specific r values
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r))), max(r))) %>% # choose specific r values
ggplot(., aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
states.summary %>% filter(r %in% c(min(r), which(abs(r - median(r))), max(r)))
which(abs(r - median(r)))
which.min(which.min(abs(r - 3)))
which.min(which.min(abs(r - 2)))
r
which.min(which.min(abs(r - 2)))
which.min(abs(r - 2)))
which.min(abs(r - 2))
r[which.min(abs(r - 2))]
r[which.min(abs(r - median(r)))]
# Line plot of B_end vs L
states.summary %>% filter(r %in% c(min(r), r[which.min(abs(r - median(r)))], max(r))) %>% # choose specific r values
ggplot(., aes(x=L, y = B.star)) +
geom_line(aes(color = factor(r)))
1/exp(20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
nes.cells.final <- read.table("DATA derived/nes.cells.final.csv",header=T, sep=',')
