# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau_s = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau_s)
return(leaf_traits)
}
cycle_carbon <- function(sigma, parameter_list, N_min) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(L, gain, cost, net)
return(carbon_balance)
}
cycle_carbon(0.05, p_list, 0.05)
cycle_carbon(0.02, p_list, 0.05)
## Figure 1
lma <- seq(0,0.25, 0.01)
?map, ...)
??map
?purrr
library(purrr)
?map2_dfc
lma
?map_dfr
?map2_dfr
cycle_carbon <- function(sigma, parameter_list = p_list, N_min = 0.05) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(L, gain, cost, net)
return(carbon_balance)
}
map_dfr(lma, cycle_carbon)
?map_dfr
map_dfr(lma = lma, cycle_carbon)
map_dfr(lma, cycle_carbon)
?broom
cycle_carbon <- function(sigma, parameter_list = p_list, N_min = 0.05) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
## Figure 1
lma <- seq(0,0.25, 0.01)
map_dfr(lma, cycle_carbon)
carbon_balance <- map_dfr(lma, cycle_carbon)
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L))
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(gain:net, name = carbon, values_to = flux)
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(gain:net, name = "carbon", values_to = flux)
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(gain:net, name = "carbon", values_to = "flux")
?pivot_longer
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, name = "carbon", values_to = "flux")
data <- carbon_balance %>%
pivot_longer(cols = gain:net, name = "carbon", values_to = "flux")
carbon_balance
data <- carbon_balance %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
# Read parameter file
param_file <- "parameters/default_species.p"
params <- read_csv(param_file)
p_list <- setNames(as.list(params$value), params$parameter) # list
decompose_soil <- function(temp, moisture) {
# not explored yet, so set to temp = 1, moisture = 1 below for a linear relationship
rate <- temp*moisture
return(rate)
}
link_traits <- function(sigma, parameter_list) {
## INPUTS:
# sigma = LMA
# parameters = parameter list
# assign parameters within local function environment
list2env(parameter_list, envir = environment())
# soil conditions -- not explored, so set to 1
temp <- 1 # deg C
moisture <- 1 # random soil moisture value
## Calculate traits derived from LMA
# leaf lifespan
lambda = c*sigma
# leaf N content
n = A + B*sigma
# leaf respiration
R = n*r
# SOM residence time
tau_s = decompose_soil(temp, moisture)*s*sigma
## Create list of leaf traits
leaf_traits <- tibble::lst(sigma, lambda, n, R, tau_s)
return(leaf_traits)
}
cycle_carbon <- function(sigma, parameter_list = p_list, N_min = 0.05) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
# generate data
lma <- seq(0,0.25, 0.01)
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
cycle_carbon <- function(sigma, parameter_list = p_list, N_min = 5) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
# generate data
lma <- seq(0,0.25, 0.01)
carbon_balance <- map_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
# generate data
lma <- seq(0,0.25, 0.01)
n_min <- seq(0, 5, 10)
carbon_balance <- map2_dfr(lma, n_min, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
cycle_carbon <- function(sigma, parameter_list = p_list, N_min) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameters)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
n_min <- seq(0, 5, 10)
carbon_balance <- map2_dfr(lma, n_min, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
leaf_traits <- link_traits(sigma, parameter_list)
cycle_carbon <- function(sigma, parameter_list = p_list, N_min) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
carbon_balance <- map2_dfr(lma, n_min, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance <- map2_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
?map2_dfr
carbon_balance <- pmap_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
cycle_carbon <- function(sigma, parameter_list = p_list, N_min = 5) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
# generate data
lma <- seq(0,0.25, 0.01)
carbon_balance <- pmap_dfr(lma, cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance <- pmap_dfr(list(lma), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_Balance
carbon_balance
# generate data
lma <- seq(0,0.25, 0.01)
N_min <- seq(0, 25, 1)
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
cycle_carbon <- function(sigma, N_min, parameter_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, L, gain, cost, net)
return(carbon_balance)
}
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance
cycle_carbon <- function(sigma, N_min, parameter_list = p_list) {
##INPUT
##OUTPUT: list with the following
# L : leaf area index
# gain : carbon gain
# cost :carbon cost
# net : net carbon
leaf_traits <- link_traits(sigma, parameter_list)
list2env(parameter_list, envir = environment())
list2env(leaf_traits, envir = environment())
# leaf area
L = N_min*lambda/n
# carbon balance
gain = V/k * (1 - exp(-k*L))
cost = (R + G * sigma/lambda)*L
net = gain - cost
carbon_balance <- tibble(sigma, N_min, L, gain, cost, net)
return(carbon_balance)
}
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
carbon_balance
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
N_min <- rep(10, length(lma))
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
# generate data
lma <- rep(seq(0,0.25, 0.01), 5)
?rep
N_min <- rep(c(0,5,10,15,20), each = length(lma))
N_min
# generate data
lma <- rep(seq(0,0.25, 0.01), 5)
lma
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
length(lma)
N_min <- rep(c(0,5,10,15,20), each = length(lma)/5)
N_min
lma
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon))
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
N_min <- rep(c(1,5,10,15,20), each = length(lma)/5)
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
# generate data
lma <- rep(seq(0,0.25, 0.001), 5)
N_min <- rep(c(1,5,10,15,20), each = length(lma)/5)
carbon_balance <- pmap_dfr(list(lma, N_min), cycle_carbon) %>%
pivot_longer(cols = gain:net, names_to = "carbon", values_to = "flux")
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L))
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = L))  +
facet_wrap(vars(N_min))
# viz
ggplot(carbon_balance) +
geom_line(aes(x = sigma, y = flux, color = carbon)) +
facet_wrap(vars(N_min))
knitr::opts_chunk$set(echo = TRUE)
library(googlesheets4)
library(tidyverse)
read_pheno_sheet <- function(file) {
site_plot <- read_sheet(file, range = "1-1!B1:B2", col_names = F)
site <- site_plot[[1,1]]
plot <- site_plot[[2,1]]
data_1_2 <- read_sheet(file, skip = 2, range = "1-1!A3:N39", na = c("NA", "")) %>%
fill(SPP.)
data_3_4 <- read_sheet(file, skip = 2, range = "1-1!O3:AB39", na = c("NA", "")) %>%
fill(SPP.)
data_raw <- bind_rows(data_1_2, data_3_4)
data_new <- data_raw[ , colSums(is.na(data_raw)) < nrow(data_raw)] %>%
pivot_longer(starts_with("2021"), names_to = "DATE", values_to = "COUNT") %>%
arrange(SPP., ID, PHENO., DATE) %>%
fill(COUNT) %>%  #fill in GREEN NA's
# formatting
pivot_wider(names_from = PHENO., values_from = COUNT, values_fill = NA) %>%
mutate(DATE = as_date(DATE))
pheno_data <- data_new %>%
mutate(SITE = site, PLOT = plot) %>%
# calculate percentages
mutate(GREEN_percent = GREEN_count / (GREEN_count + SENES_count),
GREEN_percent1 = GREEN_length1 /TOTAL_length1,
GREEN_percent2 = GREEN_length2 /TOTAL_length2,
GREEN_percent3 = GREEN_length3 /TOTAL_length3) %>%
mutate(GREEN_percentMean = rowMeans(select(., GREEN_percent1:GREEN_percent3), na.rm = T))
print(file)
return(pheno_data)
}
knitr::opts_chunk$set(echo = FALSE, warning = F)
require(tidyverse)
require(googlesheets4) # read in google spreadsheets without having to download
require(lubridate) # good package for working with dates
## Read data from local file
# orig_data <- read.csv(file = "data_phenology.csv", na.strings = c(""))
## Read from google sheet
orig_data <- read_sheet("https://docs.google.com/spreadsheets/d/1ohX8eUkBqoMZfytQkxMzWWYJ8GymI-xjPWnkMPsvst4/edit#gid=1013468108",
col_types = c("cccciiiiiiiiic")) ## specify what type so that it doesn't read as lists (due to letters and numbers in column)
## Read from google sheet
orig_data <- read_sheet("https://docs.google.com/spreadsheets/d/1ohX8eUkBqoMZfytQkxMzWWYJ8GymI-xjPWnkMPsvst4/edit#gid=1013468108",
col_types = c("cccciiiiiiiiiic")) ## specify what type so that it doesn't read as lists (due to letters and numbers in column)
#filling down the species names so it's easier to work with
data <- fill(orig_data, Species) %>% #   fill down the sp. names
fill(ID) %>%
## remove empty columns
select(!starts_with("...")) %>%
## remove rows with notes
filter(!(Pheno %in% c("yellow", "flower", "notes", NA)))
# reshape data to make it easier to work with
tidy_data <- data %>%
## reshape date columns to a single date column
pivot_longer(cols = starts_with("0"),
names_to = "date",
values_to = "count") %>%
## reformat date to convert to R date
mutate(date = str_c("2022-", date)) %>%
mutate(date = as_date(date)) %>%
## create columns for Transect & Flag from ID
separate(ID, c("Transect", "Flag"), remove = F) %>%
## create unique plant ID
mutate(ID_Species = str_c(ID, "_", Species)) %>%
## remove empty rows? Sometimes helpful, not sure.
filter(!is.na(count))
## OR replace NA empty rows with zeros
# mutate(count= ifelse(is.na(count), 0, count))
```
## Graminoids
plot_data <- tidy_data %>%
filter(Species %in% c("CARBIG", "ERIVAG")) %>%
filter(!is.na(count)) %>%
group_by(ID, Transect, date, Species, Pheno) %>%
summarize(total_length = sum(count),
avg_length = sum(count)/n())
ggplot(plot_data, aes(x=date, y= total_length, color = Transect, group_by = ID)) +
geom_point() +
geom_line (data=plot_data[!is.na(plot_data$total_length),]) +
facet_grid(Pheno ~ Species)
## Deciduous Shrubs
plot_data <- tidy_data %>%
filter(Species %in% c("BETNAN", "SALPUL")) %>%
filter(Transect == 6)
## Deciduous Shrubs
plot_data <- tidy_data %>%
filter(Species %in% c("BETNAN", "SALPUL")) %>%
filter(Transect == 6)
ggplot(plot_data, aes(x=date, y= count, fill = Pheno)) +
geom_bar(stat = "identity") +
#geom_line(data=plot_data[!is.na(plot_data$count),]) +
facet_grid(ID ~ Species)
## Deciduous Shrubs
plot_data <- tidy_data %>%
filter(Species %in% c("BETNAN", "SALPUL")) %>%
filter(Transect == 1)
ggplot(plot_data, aes(x=date, y= count, fill = Pheno)) +
geom_bar(stat = "identity") +
#geom_line(data=plot_data[!is.na(plot_data$count),]) +
facet_grid(ID ~ Species)
plot_data %>% select(Date) %>% unique()
tidy_data %>% select(Date) %>% unique()
tidy_data
tidy_data %>% select(date) %>% unique()
tidy_data %>% select(date) %>% unique() %>% arrange()
tidy_data %>% pull(date) %>% unique() %>% arrange()
tidy_data %>% pull(date) %>% unique() %>% order()
tidy_data %>% pull(date) %>% unique()
tidy_data %>% pull(date) %>% unique() %>% arrange()
tidy_data %>% pull(date) %>% unique()
tidy_data
ls
## Graminoids
plot_data <- tidy_data %>%
filter(Species %in% c("CARBIG", "ERIVAG")) %>%
filter(!is.na(count)) %>%
group_by(ID, Transect, date, Species, Pheno) %>%
summarize(total_length = sum(count),
avg_length = sum(count)/n())
?findpeaks
install.packages("pracma")
library(pracma)
?findpeaks
?spectrum
install.packages("tidyverse")
